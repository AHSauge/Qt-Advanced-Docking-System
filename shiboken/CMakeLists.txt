cmake_minimum_required(VERSION 3.1)
cmake_policy(VERSION 3.1)

# Consider changing the project name to something relevant for you.
project(PyQtAds)

# ================================ General configuration ======================================

# Set CPP standard to C++11 minimum.
set(CMAKE_CXX_STANDARD 11)

# The sample library for which we will create bindings. You can change the name to something
# relevant for your project.
set(sample_library "qtadvanceddocking")

# The name of the generated bindings module (as imported in Python). You can change the name
# to something relevant for your project.
set(bindings_library "PyQtAds")

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_SOURCE_DIR}/shiboken/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/shiboken/bindings.xml)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/pyqtads_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/ads_wrapper.cpp
    )


# ================================== Shiboken detection ======================================
# Use provided python interpreter if given.
if(NOT python_interpreter)
    find_program(python_interpreter "python")
endif()
message(STATUS "Using python interpreter: ${python_interpreter}")

find_package(Shiboken2 2.0.0 REQUIRED)
find_package(Shiboken2 COMPONENTS libshiboken REQUIRED)
find_package(PySide2 2.0.0 REQUIRED)
find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)

add_definitions(${Qt5Widgets_DEFINITIONS})
add_definitions(-DQT_NO_KEYWORDS)

message(STATUS "qt include dir: ${Qt5Widgets_INCLUDE_DIRS}")
message(STATUS "libshiboken include dir: ${SHIBOKEN_INCLUDE_DIR}")
message(STATUS "pyside2 typesystem dir: ${PYSIDE_TYPESYSTEMS}")
message(STATUS "pyside2 include dir: $<BUILD_INTERFACE:${PYTHON_INCLUDE_DIRS}>")

# ====================== Shiboken target for generating binding C++ files  ====================

list(JOIN Qt5Widgets_INCLUDE_DIRS ";-I" qtgui_includes)
set(qtgui_includes "-I${qtgui_includes}")

# Set up the options to pass to shiboken.
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    ${qtgui_includes}
    -I${CMAKE_SOURCE_DIR}/src
    -T${PYSIDE_TYPESYSTEMS}
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(OUTPUT ${generated_sources}
                    COMMAND "shiboken2"
                    ${shiboken_options} ${wrapped_header} ${typesystem_file}
                    DEPENDS ${generated_sources_dependencies}
                    IMPLICIT_DEPENDS CXX ${wrapped_header}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${typesystem_file}.")


# =============================== CMake target - bindings_library =============================

get_property(SHIBOKEN_INCLUDE_DIR TARGET Shiboken2::libshiboken PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(PYSIDE_INCLUDE_DIR TARGET PySide2::pyside2 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)

# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${${bindings_library}_sources})

# Apply relevant include and link flags.
#target_include_directories(${bindings_library} PRIVATE ${python_include_dir})
target_include_directories(${bindings_library} PRIVATE ${SHIBOKEN_PYTHON_INCLUDE_DIRS})
target_include_directories(${bindings_library} PRIVATE ${SHIBOKEN_INCLUDE_DIR})
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR})
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR})
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR}/QtCore/)
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR}/QtWidgets/)
target_include_directories(${bindings_library} PRIVATE ${PYSIDE_INCLUDE_DIR}/QtGui/)

target_include_directories(${bindings_library} PRIVATE
    $<INSTALL_INTERFACE:include>
    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>
)

#target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${sample_library})

# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")
if(WIN32)
    set_property(TARGET ${bindings_library} PROPERTY SUFFIX ".pyd")
endif()

# Make sure the linker doesn't complain about not finding Python symbols on macOS.
if(APPLE)
  set_target_properties(${bindings_library} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif(APPLE)

# Find and link to the python import library only on Windows.
# On Linux and macOS, the undefined symbols will get resolved by the dynamic linker
# (the symbols will be picked up in the Python executable).
if (WIN32)
    list(GET python_linking_data 0 python_libdir)
    list(GET python_linking_data 1 python_lib)
    find_library(python_link_flags ${python_lib} PATHS ${python_libdir} HINTS ${python_libdir})
    target_link_libraries(${bindings_library} PRIVATE ${python_link_flags})
endif()
